/**
  ****************************(C) COPYRIGHT 2019 DJI****************************
  * @file       chassis.c/h
  * @brief      chassis control task,
  *             底盘控制任务
  * @note
  * @history
  *  Version    Date            Author          Modification
  *  V1.0.0     Dec-26-2018     RM              1. 完成
  *  V1.1.0     Nov-11-2019     RM              1. add chassis power control
  *
  @verbatim
  ==============================================================================

  ==============================================================================
  @endverbatim
  ****************************(C) COPYRIGHT 2019 DJI****************************
  */
#ifndef CHASSIS_TASK_H
#define CHASSIS_TASK_H
#include "struct_typedef.h"
#include "CAN_receive.h"
#include "gimbal_task.h"
#include "pid.h"
#include "remote_control.h"
#include "user_lib.h"

#define PID_CONTROL_LOOP 0
#define LQR_CONTROL_LOOP 1

// in the beginning of task ,wait a time
// 任务开始空闲一段时间
#define CHASSIS_TASK_INIT_TIME 357

// the channel num of controlling vertial speed
// 前后的遥控器通道号码
#define CHASSIS_X_CHANNEL 1
// the channel num of controlling horizontal speed
// 左右的遥控器通道号码
#define CHASSIS_Y_CHANNEL 0

// in some mode, can use remote control to control rotation speed
// 在特殊模式下，可以通过遥控器控制旋转
#define CHASSIS_WZ_CHANNEL 2

// the channel of choosing chassis mode,
// 选择底盘状态 开关通道号
#define CHASSIS_MODE_CHANNEL 0
// rocker value (max 660) change to vertial speed (m/s)
// 遥控器前进摇杆（max 660）转化成车体前进速度（m/s）的比例
#define CHASSIS_VX_RC_SEN 0.006f
// rocker value (max 660) change to horizontal speed (m/s)
// 遥控器左右摇杆（max 660）转化成车体左右速度（m/s）的比例
#define CHASSIS_VY_RC_SEN 0.005f
// in following yaw angle mode, rocker value add to angle
// 跟随底盘yaw模式下，遥控器的yaw遥杆（max 660）增加到车体角度的比例
#define CHASSIS_ANGLE_Z_RC_SEN 0.000002f
// in not following yaw angle mode, rocker value change to rotation speed
// 不跟随云台的时候 遥控器的yaw遥杆（max 660）转化成车体旋转速度的比例
#define CHASSIS_WZ_RC_SEN 0.01f

#define CHASSIS_ACCEL_X_NUM 0.1666666667f
#define CHASSIS_ACCEL_Y_NUM 0.3333333333f

// rocker value deadline
// 摇杆死区
#define CHASSIS_RC_DEADLINE 10

#define MOTOR_SPEED_TO_CHASSIS_SPEED_VX 0.25f
#define MOTOR_SPEED_TO_CHASSIS_SPEED_VY 0.25f
#define MOTOR_SPEED_TO_CHASSIS_SPEED_WZ 0.25f

#define MOTOR_DISTANCE_TO_CENTER 0.2f

// chassis task control time  2ms
// 底盘任务控制间隔 2ms
#define CHASSIS_CONTROL_TIME_MS 2
// chassis task control time 0.002s
// 底盘任务控制间隔 0.002s
#define CHASSIS_CONTROL_TIME 0.002f
// chassis control frequence, no use now.
// 底盘任务控制频率，尚未使用这个宏
#define CHASSIS_CONTROL_FREQUENCE 500.0f
// chassis 3508 max motor control current
// 底盘3508最大can发送电流值
#define MAX_MOTOR_CAN_CURRENT 16000.0f
// press the key, chassis will swing
// 底盘摇摆按键
#define SWING_KEY KEY_PRESSED_OFFSET_CTRL
// chassi forward, back, left, right key
// 底盘前后左右控制按键
#define CHASSIS_FRONT_KEY KEY_PRESSED_OFFSET_W
#define CHASSIS_BACK_KEY KEY_PRESSED_OFFSET_S
#define CHASSIS_LEFT_KEY KEY_PRESSED_OFFSET_A
#define CHASSIS_RIGHT_KEY KEY_PRESSED_OFFSET_D

// m3508转化成底盘速度(m/s)的比例，
#define M3508_MOTOR_RPM_TO_VECTOR 0.000415809748903494517209f
#define CHASSIS_MOTOR_RPM_TO_VECTOR_SEN M3508_MOTOR_RPM_TO_VECTOR

//m3508转子转速(rpm)转化成底盘速度(m/s)的比例，c=pi*r/(30*k)，k为电机减速比 .yt
#define CHASSIS_MOTOR_CURRENT_TO_TORQUE_SEN 0.000366211f



// single chassis motor max speed
// 单个底盘电机最大速度
#define MAX_WHEEL_SPEED 4.0f
// chassis forward or back max speed
// 底盘运动过程最大前进速度
#define NORMAL_MAX_CHASSIS_SPEED_X 2.0f
// chassis left or right max speed
// 底盘运动过程最大平移速度
#define NORMAL_MAX_CHASSIS_SPEED_Y 1.5f

#define CHASSIS_WZ_SET_SCALE 0.1f

// when chassis is not set to move, swing max angle
// 摇摆原地不动摇摆最大角度(rad)
#define SWING_NO_MOVE_ANGLE 0.7f
// when chassis is set to move, swing max angle
// 摇摆过程底盘运动最大角度(rad)
#define SWING_MOVE_ANGLE 0.31415926535897932384626433832795f



// chassis motor speed PID
// 底盘电机速度环PID
#define M3505_MOTOR_SPEED_PID_KP 15000.0f
#define M3505_MOTOR_SPEED_PID_KI 10.0f
#define M3505_MOTOR_SPEED_PID_KD 0.0f
#define M3505_MOTOR_SPEED_PID_MAX_OUT MAX_MOTOR_CAN_CURRENT
#define M3505_MOTOR_SPEED_PID_MAX_IOUT 2000.0f

// chassis follow angle PID
// 底盘旋转跟随PID
#define CHASSIS_FOLLOW_GIMBAL_PID_KP 40.0f
#define CHASSIS_FOLLOW_GIMBAL_PID_KI 0.0f
#define CHASSIS_FOLLOW_GIMBAL_PID_KD 0.0f
#define CHASSIS_FOLLOW_GIMBAL_PID_MAX_OUT 6.0f
#define CHASSIS_FOLLOW_GIMBAL_PID_MAX_IOUT 0.2f

#define BALANCE_LOOP_PID_KP 0.0f
#define BALANCE_LOOP_PID_KI 0.0f
#define BALANCE_LOOP_PID_KD 0.0f
#define BALANCE_LOOP_PID_MAX_OUT 0.0f
#define BALANCE_LOOP_PID_MAX_IOUT 0.0f

#define SPEED_LOOP_PID_KP 0.0f
#define SPEED_LOOP_PID_KI 0.0f
#define SPEED_LOOP_PID_KD 0.0f
#define SPEED_LOOP_PID_MAX_OUT 0.0f
#define SPEED_LOOP_PID_MAX_IOUT 0.0f

//LQR反馈增益系数
#define LQR_K1 0.0f
#define LQR_K2 0.0f
#define LQR_K3 -15.0f
#define LQR_K4 0.0f
#define LQR_K15 0.0f
#define LQR_K16 0.0f
#define LQR_K25 -LQR_K15
#define LQR_K26 -LQR_K16

typedef enum
{
  CHASSIS_ZERO_FORCE,
  CHASSIS_FOLLOW_GIMBAL,
  CHASSIS_NO_FOLLOW_GIMBAL
} chassis_mode_e;

typedef struct
{
  const motor_measure_t *chassis_motor_measure;
  fp32 accel;
  fp32 speed;
  fp32 speed_set;
  fp32 omega;      //电机输出轴旋转速度
  fp32 torque;     // 电机输出力矩
  fp32 torque_set; // 电机输出力矩设定值
  int16_t give_current;
} chassis_motor_t;

typedef struct
{
  const RC_ctrl_t *chassis_RC;               // 底盘使用的遥控器指针
  const gimbal_motor_t *chassis_yaw_motor;   // 底盘使用到yaw云台电机的相对角度来计算底盘的欧拉角.
  const gimbal_motor_t *chassis_pitch_motor; // 底盘使用到pitch云台电机的相对角度来计算底盘的欧拉角

  const fp32 *chassis_INS_angle;             // 获取陀螺仪解算出的欧拉角指针
  const fp32 *chassis_INS_angle_speed;      //角速度指针

  chassis_mode_e chassis_mode;               // 底盘控制状态机
  chassis_mode_e last_chassis_mode;          // 底盘上次控制状态机
  pid_type_def chassis_angle_pid;            // 底盘跟随角度pid

  chassis_motor_t motor_chassis[2]; // 底盘电机数据.yt
  pid_type_def motor_speed_pid[2];  // 仅用于计算速度 .yt
  pid_type_def balance_loop_pid;    // 直立环pid .yt
  pid_type_def speed_loop_pid;      // 速度环pid .yt
  fp32 angle_set;                   // 角度设定值
  fp32 delta_angle;                 //底盘yaw轴角度设定值与yaw轴角度当前值之差.yt

  fp32 vx; // 前进为正
  fp32 vx_set;
  fp32 omega;                                        // 角速度
  first_order_filter_type_t chassis_cmd_slow_set_vx; // 使用一阶低通滤波减缓设定值
  first_order_filter_type_t chassis_cmd_slow_set_vy; // 使用一阶低通滤波减缓设定值

  fp32 chassis_relative_angle;     // 底盘与云台的相对角度，单位 rad
  fp32 chassis_relative_angle_set; // 设置相对云台控制角度
  fp32 chassis_yaw_set;

  fp32 vx_max_speed;  // 前进方向最大速度 单位m/s
  fp32 vx_min_speed;  // 后退方向最大速度 单位m/s
  fp32 chassis_yaw;   // 陀螺仪和云台电机叠加的yaw角度
  fp32 chassis_pitch; // 陀螺仪和云台电机叠加的pitch角度
  fp32 chassis_roll;  // 陀螺仪和云台电机叠加的roll角度
  fp32 chassis_yaw_speed;           //底盘陀螺仪反馈的当前yaw角速度.yt
	fp32 chassis_pitch_speed;         //底盘陀螺仪反馈的当前pitch角速度.yt
	fp32 chassis_roll_speed;          //底盘陀螺仪反馈的当前roll角速度.yt

} chassis_move_t;

/**
 * @brief          chassis task, osDelay CHASSIS_CONTROL_TIME_MS (2ms)
 * @param[in]      pvParameters: null
 * @retval         none
 */
/**
 * @brief          底盘任务，间隔 CHASSIS_CONTROL_TIME_MS 2ms
 * @param[in]      pvParameters: 空
 * @retval         none
 */
extern void chassis_task(void const *pvParameters);

/**
 * @brief          accroding to the channel value of remote control, calculate chassis vertical and horizontal speed set-point
 *
 * @param[out]     vx_set: vertical speed set-point
 * @param[out]     vy_set: horizontal speed set-point
 * @param[out]     chassis_move_rc_to_vector: "chassis_move" valiable point
 * @retval         none
 */
/**
 * @brief          根据遥控器通道值，计算纵向和横移速度
 *
 * @param[out]     vx_set: 纵向速度指针
 * @param[out]     vy_set: 横向速度指针
 * @param[out]     chassis_move_rc_to_vector: "chassis_move" 变量指针
 * @retval         none
 */
extern void chassis_rc_to_control_vector(fp32 *vx_set, fp32 *vy_set, chassis_move_t *chassis_move_rc_to_vector);

#endif
